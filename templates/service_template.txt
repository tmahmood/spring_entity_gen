package %(package_name)s.%(snake_case)s;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import %(package_name)s.%(snake_case)s.%(java_class_name)s;
import %(package_name)s.%(snake_case)s.%(java_class_name)sRepository;

@Service
public class %(java_class_name)sService {

    private final %(java_class_name)sRepository %(camel_case)sRepository;
    private final PageResourceBuilder<%(java_class_name)s> %(camel_case)sPageResourceBuilder = new PageResourceBuilder<>();
    private final %(java_class_name)sResourceAssembler %(camel_case)sResourceAssembler;

    private final ProjectionFactory projectionFactory;
    HttpServletRequest httpServletRequest;


    @Autowired
    public %(java_class_name)sController(%(java_class_name)sRepository %(camel_case)sRepository) {
        this.%(camel_case)sRepository = %(camel_case)sRepository;
    }

    public @ResponseBody RepresentationModel<?> getAll%(java_class_name)s() {
        return pageBuilder(%(camel_case)sRepository.findAll(Pageable.unpaged()));
    }

    private RepresentationModel<?> pageBuilder(Page<%(java_class_name)s> result) {
        if (result.isEmpty()) {
            return HalModelBuilder.emptyHalModel()
                    .embed(result, LinkRelation.of("%(camel_case_plural)s"))
                    .build();
        }
        return designationPageResourceBuilder.getPagedResourcesFromPage(result, %(camel_case)sResourceAssembler);
    }
}
